import json
import pytest
from django.forms.models import model_to_dict

from .factories import AccountFactory, BookFactory, UserFactory

pytestmark = pytest.mark.django_db


class TestBooksEndpoint:
    endpoint = '/books/'

    def test_list(self, api_client):
        # Fills data in Book table for testing
        books_example = BookFactory.create_batch(6)
        # I'm converting one of the generated models to dict for further check
        book_to_check = model_to_dict(books_example[0])
        book_to_check['price'] = str(book_to_check['price'])

        response = api_client().get(self.endpoint)

        assert response.status_code == 200
        # Test if book generated by factory is in response json
        assert book_to_check in json.loads(response.content)


class TestBooksBuyEndpoint:
    endpoint = '/books/buy/'

    def test_unauthorized_user(self, api_client):
        expected_json = {'books': [1, 2, 3]}
        response = api_client().post(self.endpoint, data=expected_json, format='json')
        assert response.status_code == 403

    def test_authorized_user(self, api_client):
        client = api_client()
        # Fills data in Book table for testing
        books_example = BookFactory.create_batch(4)
        books_ids = [book.id for book in books_example[1:]]
        total_cost = float(sum([book.price for book in books_example[1:]]))

        # Creates users for testing
        user_example_1 = UserFactory()
        user_example_2 = UserFactory()

        # Create account with insufficient funds
        account_example_1 = AccountFactory(balance=0.01, user=user_example_1)
        # Create account with sufficient funds
        account_example_2 = AccountFactory(balance=999999.99, user=user_example_2)
        expected_json = {'books': books_ids}

        # Force authentication for testing
        client.force_authenticate(user=user_example_1)
        response = client.post(self.endpoint, data=expected_json, format='json')
        assert response.status_code == 402

        # Force authentication for testing
        client.force_authenticate(user=user_example_2)
        response = client.post(self.endpoint, data=expected_json, format='json')
        assert response.status_code == 201
        expected_json['total_cost'] = total_cost
        assert json.loads(response.content) == expected_json
